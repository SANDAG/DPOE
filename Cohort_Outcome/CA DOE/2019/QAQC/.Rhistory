colnames(Source_data)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
comparison
#Source data
library(dplyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
#Source data
library(dplyr)
#Source data
library(dplyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- dplyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
#To see column names in source data
colnames(Source_data)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
#Rename source data. Make sure order is the same as in the database.
Source_data <- dplyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
# file comparison code between a CSV and SQL Table
#Source data
library(dplyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- dplyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
#Source data
library(plyr)
help(rename)
install.packages("plyr")
#Source data
library(plyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
# SQL data
library(RODBC)
sql_query <- 'SELECT *
FROM [dpoe_stage].[staging].[emission_factors_2]'
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
database_data <- sqlQuery(channel,sql_query,stringsAsFactors = FALSE)
odbcClose(channel)
database_data <- database_data[order(database_data$vehicle, database_data$gvwr, database_data$fuel_type, database_data$model,
database_data$fuel_tech, database_data$electric_mileage, database_data$vpr, database_data$county,
database_data$mpo, database_data$subarea, database_data$cbgc, database_data$zip, database_data$vehicle_population),]
# compare files
all(Source_data == database_data)
identical(Source_data,database_data)
help(rename)
#Source data
library(plyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
#Order source data columns to match database column names
Source_data <- Source_data[order(Source_data$Vehicle.Category, Source_data$GVWR.Class, Source_data$Fuel.Type, Source_data$Model.Year,
Source_data$Fuel.Technology, Source_data$Electric.Mile.Range, Source_data$Number.of.Vehicles.Registered.at.the.Same.Address,
Source_data$County, Source_data$MPO, Source_data$Sub.Area, Source_data$Census.Block.Group.Code, Source_data$ZIP.Code,
Source_data$Vehicle.Population),]
#Source data
library(plyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="MPO", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
Source_data <- Source_data[order(Source_data$vehicle, Source_data$gvwr, Source_data$fuel_type, Source_data$model,
Source_data$fuel_tech, Source_data$electric_mileage, Source_data$vpr, Source_data$county,
Source_data$mpo, Source_data$subarea, Source_data$cbgc, Source_data$zip, Source_data$vehicle_population),]
#Source data
library(plyr)
# Source data, make sure to use double backslashes for the file path
Source_data <- read.csv(paste("R:\\DPOE\\EmissionFactors\\CARB\\2017\\QAQC\\FleetDB-County-SANDIEGO-2017-All-Clean.csv",sep=''),
stringsAsFactors = FALSE)
#To see column names in source data
colnames(Source_data)
#Rename source data. Make sure order is the same as in the database.
Source_data <- plyr::rename(Source_data, c("Vehicle.Category"="vehicle", "GVWR.Class"="gvwr", "Fuel.Type"="fuel_type",
"Model.Year"="model","Fuel.Technology"="fuel_tech", "Electric.Mile.Range"="electric_mileage", "Number.of.Vehicles.Registered.at.the.Same.Address"="vpr",
"County"="county", "MPO"="mpo", "Sub.Area"="subarea", "Census.Block.Group.Code"="cbgc", "ZIP.Code"="zip", "Vehicle.Population"="vehicle_population"))
Source_data <- Source_data[order(Source_data$vehicle, Source_data$gvwr, Source_data$fuel_type, Source_data$model,
Source_data$fuel_tech, Source_data$electric_mileage, Source_data$vpr, Source_data$county,
Source_data$mpo, Source_data$subarea, Source_data$cbgc, Source_data$zip, Source_data$vehicle_population),]
# SQL data
library(RODBC)
sql_query <- 'SELECT *
FROM [dpoe_stage].[staging].[emission_factors_2]'
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
database_data <- sqlQuery(channel,sql_query,stringsAsFactors = FALSE)
odbcClose(channel)
database_data <- database_data[order(database_data$vehicle, database_data$gvwr, database_data$fuel_type, database_data$model,
database_data$fuel_tech, database_data$electric_mileage, database_data$vpr, database_data$county,
database_data$mpo, database_data$subarea, database_data$cbgc, database_data$zip, database_data$vehicle_population),]
# compare files
all(Source_data == database_data)
identical(Source_data,database_data)
x<- head(Source_data)
y<- head(database_data)
all(x==y)
x<- head(Source_data)
y<- head(database_data)
View(x)
View(y)
#IPEDS Vintage 2019 Data
# file comparison code between a CSV source file and raw upload SQL Table
#Reading in packages
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dep = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("data.table", "ggplot2", "scales", "sqldf", "rstudioapi", "RODBC", "reshape2",
"stringr","tidyverse", "plyr", "readxl", "readr", "reshape", "taRifx")
pkgTest(packages)
#Read in source files
source_2010 <- read.csv("R:\\DPOE\\IPEDS\\2019\\Source\\c2010_a_rv.csv", header=TRUE, sep=",")
#Read in SQL data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_2010 <- 'SELECT * FROM dpoe_stage.dbo.c2010_a_rv'
db_2010 <- sqlQuery(channel,sql_2010,stringsAsFactors = FALSE)
odbcClose(channel)
#Rename columns with an extra space
db_2010 <- plyr::rename(db_2010, c("DVCWHW  "="DVCWHW"))
#Convert data types
#2010
source_2010$"XCNRALM"<-as.character(source_2010$"XCNRALM")
source_2010$"XCNRALW"<-as.character(source_2010$"XCNRALW")
source_2010$"XCRACE03"<-as.character(source_2010$"XCRACE03")
source_2010$"XCRACE04"<-as.character(source_2010$"XCRACE04")
source_2010$"XCRACE05"<-as.character(source_2010$"XCRACE05")
source_2010$"XCRACE06"<-as.character(source_2010$"XCRACE06")
source_2010$"XCRACE07"<-as.character(source_2010$"XCRACE07")
source_2010$"XCRACE08"<-as.character(source_2010$"XCRACE08")
source_2010$"XCRACE09"<-as.character(source_2010$"XCRACE09")
source_2010$"XCRACE10"<-as.character(source_2010$"XCRACE10")
source_2010$"XCRACE11"<-as.character(source_2010$"XCRACE11")
source_2010$"XCRACE12"<-as.character(source_2010$"XCRACE12")
source_2010$"XCUNKNM"<-as.character(source_2010$"XCUNKNM")
source_2010$"XCUNKNW"<-as.character(source_2010$"XCUNKNW")
source_2010$"XCTOTALM"<-as.character(source_2010$"XCTOTALM")
source_2010$"XCTOTALW"<-as.character(source_2010$"XCTOTALW")
source_2010$"XCNRALT"<-as.character(source_2010$"XCNRALT")
source_2010$"XCRACE18"<-as.character(source_2010$"XCRACE18")
source_2010$"XCRACE19"<-as.character(source_2010$"XCRACE19")
source_2010$"XCRACE20"<-as.character(source_2010$"XCRACE20")
source_2010$"XCRACE21"<-as.character(source_2010$"XCRACE21")
source_2010$"XCRACE22"<-as.character(source_2010$"XCRACE22")
source_2010$"XCUNKNT"<-as.character(source_2010$"XCUNKNT")
source_2010$"XCTOTALT"<-as.character(source_2010$"XCTOTALT")
source_2010$"XCHISPM"<-as.character(source_2010$"XCHISPM")
source_2010$"XCHISPW"<-as.character(source_2010$"XCHISPW")
source_2010$"XCAIANM"<-as.character(source_2010$"XCAIANM")
source_2010$"XCAIANW"<-as.character(source_2010$"XCAIANW")
source_2010$"XCASIAM"<-as.character(source_2010$"XCASIAM")
source_2010$"XCASIAW"<-as.character(source_2010$"XCASIAW")
source_2010$"XCBKAAM"<-as.character(source_2010$"XCBKAAM")
source_2010$"XCBKAAW"<-as.character(source_2010$"XCBKAAW")
source_2010$"XCNHPIM"<-as.character(source_2010$"XCNHPIM")
source_2010$"XCNHPIW"<-as.character(source_2010$"XCNHPIW")
source_2010$"XCWHITM"<-as.character(source_2010$"XCWHITM")
source_2010$"XCWHITW"<-as.character(source_2010$"XCWHITW")
source_2010$"XC2MORM"<-as.character(source_2010$"XC2MORM")
source_2010$"XC2MORW"<-as.character(source_2010$"XC2MORW")
source_2010$"XCHISPT"<-as.character(source_2010$"XCHISPT")
source_2010$"XCAIANT"<-as.character(source_2010$"XCAIANT")
source_2010$"XCASIAT"<-as.character(source_2010$"XCASIAT")
source_2010$"XCBKAAT"<-as.character(source_2010$"XCBKAAT")
source_2010$"XCNHPIT"<-as.character(source_2010$"XCNHPIT")
source_2010$"XCWHITT"<-as.character(source_2010$"XCWHITT")
source_2010$"XC2MORT"<-as.character(source_2010$"XC2MORT")
source_2010$"XDVCAIT"<-as.character(source_2010$"XDVCAIT")
source_2010$"XDVCAIM"<-as.character(source_2010$"XDVCAIM")
source_2010$"XDVCAIW"<-as.character(source_2010$"XDVCAIW")
source_2010$"XDVCAPT"<-as.character(source_2010$"XDVCAPT")
source_2010$"XDVCAPM"<-as.character(source_2010$"XDVCAPM")
source_2010$"XDVCAPW"<-as.character(source_2010$"XDVCAPW")
source_2010$"XDVCBKT"<-as.character(source_2010$"XDVCBKT")
source_2010$"XDVCBKM"<-as.character(source_2010$"XDVCBKM")
source_2010$"XDVCBKW"<-as.character(source_2010$"XDVCBKW")
source_2010$"XDVCHST"<-as.character(source_2010$"XDVCHST")
source_2010$"XDVCHSM"<-as.character(source_2010$"XDVCHSM")
source_2010$"XDVCHSW"<-as.character(source_2010$"XDVCHSW")
source_2010$"XDVCWHT"<-as.character(source_2010$"XDVCWHT")
source_2010$"XDVCWHM"<-as.character(source_2010$"XDVCWHM")
source_2010$"XDVCWHW"<-as.character(source_2010$"XDVCWHW")
#Remove quotes from data
gsub('"', "", db_2010)
str(source_2010)
date.hour=strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S")
date=c("26/10/2016")
time=c("19:51:30")
View(date.hour)
day<-paste(date,"T", time)
day.time1=as.POSIXct(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time1
day.time1$year
day.time2=as.POSIXlt(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
#CA DOE Cohort Outcome 1617 Data
# file comparison code between a CSV source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Read in source and database files
source_data <- read.delim("R:\\DPOE\\CA DOE\\CALPADS\\Source\\cohort1617.txt")
#Read in SQL data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query <- 'SELECT * FROM [dpoe_stage].[dbo].[cohort1617]'
database_data <- sqlQuery(channel,sql_query,stringsAsFactors = FALSE)
odbcClose(channel)
#To see column names in data
# colnames(source_data)
# colnames(database_data)
#Rename columns
source_data <- plyr::rename(source_data, c("ï..AcademicYear"="AcademicYear", "Regular.HS.Diploma.Graduates..Count."="Regular HS Diploma Graduates (Count)",
"Met.UC.CSU.Grad.Req.s..Rate."="Met UC CSU Grad Req's (Rate)", "Golden.State.Seal.Merit.Diploma..Count."= "Golden State Seal Merit Diploma (Count)",
"CHSPE.Completer..Rate."="CHSPE Completer (Rate)", "SPED.Certificate..Count."="SPED Certificate (Count)",
"GED.Completer..Rate."="GED Completer (Rate)", "Dropout..Count."="Dropout (Count)", "Still.Enrolled..Rate."="Still Enrolled (Rate)",
"Regular.HS.Diploma.Graduates..Rate."="Regular HS Diploma Graduates (Rate)", "Seal.of.Biliteracy..Count."="Seal of Biliteracy (Count)",
"Golden.State.Seal.Merit.Diploma..Rate"="Golden State Seal Merit Diploma (Rate", "Adult.Ed..HS.Diploma..Count."="Adult Ed  HS Diploma (Count)",
"SPED.Certificate..Rate."="SPED Certificate (Rate)", "Other.Transfer..Count."="Other Transfer (Count)", "Dropout..Rate."="Dropout (Rate)",
"Met.UC.CSU.Grad.Req.s..Count."="Met UC CSU Grad Req's (Count)", "Seal.of.Biliteracy..Rate."="Seal of Biliteracy (Rate)",
"CHSPE.Completer..Count."="CHSPE Completer (Count)", "Adult.Ed..HS.Diploma..Rate."="Adult Ed  HS Diploma (Rate)", "GED.Completer..Count."="GED Completer (Count)",
"Other.Transfer..Rate."="Other Transfer (Rate)", "Still.Enrolled..Count."="Still Enrolled (Count)"))
#Verify that this worked
# all(colnames(source_data) == colnames(database_data))
#Check data types
# str(source_data)
# str(database_data)
# all(str(source_data) == str(database_data))
#Create column name list
# source_names <- colnames(source_data)
# source_names <- source_names[- c(3:5)]
#Convert data types
source_data$AcademicYear <- as.vector(source_data$AcademicYear)
source_data$AggregateLevel <- as.vector(source_data$AggregateLevel)
source_data$CountyName <- as.vector(source_data$CountyName)
source_data$DistrictName <- as.vector(source_data$DistrictName)
source_data$SchoolName <- as.vector(source_data$SchoolName)
source_data$CharterSchool <- as.vector(source_data$CharterSchool)
source_data$DASS <- as.vector(source_data$DASS)
source_data$ReportingCategory <- as.vector(source_data$ReportingCategory)
source_data$CohortStudents <- as.vector(source_data$CohortStudents)
source_data$"Regular HS Diploma Graduates (Count)" <- as.vector(source_data$"Regular HS Diploma Graduates (Count)")
source_data$"Regular HS Diploma Graduates (Rate)" <- as.vector(source_data$"Regular HS Diploma Graduates (Rate)")
source_data$"Met UC CSU Grad Req's (Count)" <- as.vector(source_data$"Met UC CSU Grad Req's (Count)")
source_data$"Met UC CSU Grad Req's (Rate)" <- as.vector(source_data$"Met UC CSU Grad Req's (Rate)")
source_data$"Seal of Biliteracy (Count)" <- as.vector(source_data$"Seal of Biliteracy (Count)")
source_data$"Seal of Biliteracy (Rate)" <- as.vector(source_data$"Seal of Biliteracy (Rate)")
source_data$"Golden State Seal Merit Diploma (Count)" <- as.vector(source_data$"Golden State Seal Merit Diploma (Count)")
source_data$"Golden State Seal Merit Diploma (Rate" <- as.vector(source_data$"Golden State Seal Merit Diploma (Rate")
source_data$"CHSPE Completer (Count)" <- as.vector(source_data$"CHSPE Completer (Count)")
source_data$"CHSPE Completer (Rate)" <- as.vector(source_data$"CHSPE Completer (Rate)")
source_data$"Adult Ed  HS Diploma (Count)" <- as.vector(source_data$"Adult Ed  HS Diploma (Count)")
source_data$"Adult Ed  HS Diploma (Rate)" <- as.vector(source_data$"Adult Ed  HS Diploma (Rate)")
source_data$"SPED Certificate (Count)" <- as.vector(source_data$"SPED Certificate (Count)")
source_data$"SPED Certificate (Rate)" <- as.vector(source_data$"SPED Certificate (Rate)")
source_data$"GED Completer (Count)" <- as.vector(source_data$"GED Completer (Count)")
source_data$"GED Completer (Rate)" <- as.vector(source_data$"GED Completer (Rate)")
source_data$"Other Transfer (Count)" <- as.vector(source_data$"Other Transfer (Count)")
source_data$"Other Transfer (Rate)" <- as.vector(source_data$"Other Transfer (Rate)")
source_data$"Dropout (Count)" <- as.vector(source_data$"Dropout (Count)")
source_data$"Dropout (Rate)" <- as.vector(source_data$"Dropout (Rate)")
source_data$"Still Enrolled (Count)" <- as.vector(source_data$"Still Enrolled (Count)")
source_data$"Still Enrolled (Rate)" <- as.vector(source_data$"Still Enrolled (Rate)")
source_data$CountyCode <- as.vector(source_data$CountyCode)
source_data$DistrictCode <- as.vector(source_data$DistrictCode)
source_data$SchoolCode <- as.vector(source_data$SchoolCode)
#Order source data table
source_data <- source_data[order(source_data$"AcademicYear",source_data$"AggregateLevel",source_data$"CountyCode",source_data$"DistrictCode",source_data$"SchoolCode",source_data$"CountyName",source_data$"DistrictName",source_data$"SchoolName",source_data$"CharterSchool",
source_data$"DASS",source_data$"ReportingCategory",source_data$"CohortStudents",source_data$"Regular HS Diploma Graduates (Count)",source_data$"Regular HS Diploma Graduates (Rate)",source_data$"Met UC CSU Grad Req's (Count)",
source_data$"Met UC CSU Grad Req's (Rate)",source_data$"Seal of Biliteracy (Count)",source_data$"Seal of Biliteracy (Rate)",source_data$"Golden State Seal Merit Diploma (Count)",source_data$"Golden State Seal Merit Diploma (Rate",
source_data$"CHSPE Completer (Count)",source_data$"CHSPE Completer (Rate)",source_data$"Adult Ed  HS Diploma (Count)",source_data$"Adult Ed  HS Diploma (Rate)",source_data$"SPED Certificate (Count)",source_data$"SPED Certificate (Rate)",
source_data$"GED Completer (Count)",source_data$"GED Completer (Rate)",source_data$"Other Transfer (Count)",source_data$"Other Transfer (Rate)",source_data$"Dropout (Count)",source_data$"Dropout (Rate)",source_data$"Still Enrolled (Count)",
source_data$"Still Enrolled (Rate)"),]
#Order database data table
database_data <- database_data[order(database_data$"AcademicYear",database_data$"AggregateLevel",database_data$"CountyCode",database_data$"DistrictCode",database_data$"SchoolCode",database_data$"CountyName",database_data$"DistrictName",database_data$"SchoolName",
database_data$"CharterSchool",database_data$"DASS",database_data$"ReportingCategory",database_data$"CohortStudents",database_data$"Regular HS Diploma Graduates (Count)",database_data$"Regular HS Diploma Graduates (Rate)",
database_data$"Met UC CSU Grad Req's (Count)",database_data$"Met UC CSU Grad Req's (Rate)",database_data$"Seal of Biliteracy (Count)",database_data$"Seal of Biliteracy (Rate)",database_data$"Golden State Seal Merit Diploma (Count)",
database_data$"Golden State Seal Merit Diploma (Rate",database_data$"CHSPE Completer (Count)",database_data$"CHSPE Completer (Rate)",database_data$"Adult Ed  HS Diploma (Count)",database_data$"Adult Ed  HS Diploma (Rate)",
database_data$"SPED Certificate (Count)",database_data$"SPED Certificate (Rate)",database_data$"GED Completer (Count)",database_data$"GED Completer (Rate)",database_data$"Other Transfer (Count)",database_data$"Other Transfer (Rate)",
database_data$"Dropout (Count)",database_data$"Dropout (Rate)",database_data$"Still Enrolled (Count)",database_data$"Still Enrolled (Rate)"),]
#Delete unique key assigned by R so that identical function will work
rownames(source_data) <- NULL
rownames(database_data) <- NULL
#compare files
all(source_data == database_data) #check cell values only
all.equal(source_data,database_data) #check cell values and data types and will return the conflicted cells
identical(source_data,database_data) #check cell values and data types
which(source_data!=database_data,arr.ind=TRUE)
source_data <- read.delim("R:\\DPOE\\CALPADS\\Source\\cohort1617.txt")
#Read in SQL data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query <- 'SELECT * FROM [dpoe_stage].[dbo].[cohort1617]'
database_data <- sqlQuery(channel,sql_query,stringsAsFactors = FALSE)
odbcClose(channel)
#To see column names in data
# colnames(source_data)
# colnames(database_data)
#Rename columns
source_data <- plyr::rename(source_data, c("ï..AcademicYear"="AcademicYear", "Regular.HS.Diploma.Graduates..Count."="Regular HS Diploma Graduates (Count)",
"Met.UC.CSU.Grad.Req.s..Rate."="Met UC CSU Grad Req's (Rate)", "Golden.State.Seal.Merit.Diploma..Count."= "Golden State Seal Merit Diploma (Count)",
"CHSPE.Completer..Rate."="CHSPE Completer (Rate)", "SPED.Certificate..Count."="SPED Certificate (Count)",
"GED.Completer..Rate."="GED Completer (Rate)", "Dropout..Count."="Dropout (Count)", "Still.Enrolled..Rate."="Still Enrolled (Rate)",
"Regular.HS.Diploma.Graduates..Rate."="Regular HS Diploma Graduates (Rate)", "Seal.of.Biliteracy..Count."="Seal of Biliteracy (Count)",
"Golden.State.Seal.Merit.Diploma..Rate"="Golden State Seal Merit Diploma (Rate", "Adult.Ed..HS.Diploma..Count."="Adult Ed  HS Diploma (Count)",
"SPED.Certificate..Rate."="SPED Certificate (Rate)", "Other.Transfer..Count."="Other Transfer (Count)", "Dropout..Rate."="Dropout (Rate)",
"Met.UC.CSU.Grad.Req.s..Count."="Met UC CSU Grad Req's (Count)", "Seal.of.Biliteracy..Rate."="Seal of Biliteracy (Rate)",
"CHSPE.Completer..Count."="CHSPE Completer (Count)", "Adult.Ed..HS.Diploma..Rate."="Adult Ed  HS Diploma (Rate)", "GED.Completer..Count."="GED Completer (Count)",
"Other.Transfer..Rate."="Other Transfer (Rate)", "Still.Enrolled..Count."="Still Enrolled (Count)"))
#Verify that this worked
# all(colnames(source_data) == colnames(database_data))
#Check data types
# str(source_data)
# str(database_data)
# all(str(source_data) == str(database_data))
#Create column name list
# source_names <- colnames(source_data)
# source_names <- source_names[- c(3:5)]
#Convert data types
source_data$AcademicYear <- as.vector(source_data$AcademicYear)
source_data$AggregateLevel <- as.vector(source_data$AggregateLevel)
source_data$CountyName <- as.vector(source_data$CountyName)
source_data$DistrictName <- as.vector(source_data$DistrictName)
source_data$SchoolName <- as.vector(source_data$SchoolName)
source_data$CharterSchool <- as.vector(source_data$CharterSchool)
source_data$DASS <- as.vector(source_data$DASS)
source_data$ReportingCategory <- as.vector(source_data$ReportingCategory)
source_data$CohortStudents <- as.vector(source_data$CohortStudents)
source_data$"Regular HS Diploma Graduates (Count)" <- as.vector(source_data$"Regular HS Diploma Graduates (Count)")
source_data$"Regular HS Diploma Graduates (Rate)" <- as.vector(source_data$"Regular HS Diploma Graduates (Rate)")
source_data$"Met UC CSU Grad Req's (Count)" <- as.vector(source_data$"Met UC CSU Grad Req's (Count)")
source_data$"Met UC CSU Grad Req's (Rate)" <- as.vector(source_data$"Met UC CSU Grad Req's (Rate)")
source_data$"Seal of Biliteracy (Count)" <- as.vector(source_data$"Seal of Biliteracy (Count)")
source_data$"Seal of Biliteracy (Rate)" <- as.vector(source_data$"Seal of Biliteracy (Rate)")
source_data$"Golden State Seal Merit Diploma (Count)" <- as.vector(source_data$"Golden State Seal Merit Diploma (Count)")
source_data$"Golden State Seal Merit Diploma (Rate" <- as.vector(source_data$"Golden State Seal Merit Diploma (Rate")
source_data$"CHSPE Completer (Count)" <- as.vector(source_data$"CHSPE Completer (Count)")
source_data$"CHSPE Completer (Rate)" <- as.vector(source_data$"CHSPE Completer (Rate)")
source_data$"Adult Ed  HS Diploma (Count)" <- as.vector(source_data$"Adult Ed  HS Diploma (Count)")
source_data$"Adult Ed  HS Diploma (Rate)" <- as.vector(source_data$"Adult Ed  HS Diploma (Rate)")
source_data$"SPED Certificate (Count)" <- as.vector(source_data$"SPED Certificate (Count)")
source_data$"SPED Certificate (Rate)" <- as.vector(source_data$"SPED Certificate (Rate)")
source_data$"GED Completer (Count)" <- as.vector(source_data$"GED Completer (Count)")
source_data$"GED Completer (Rate)" <- as.vector(source_data$"GED Completer (Rate)")
source_data$"Other Transfer (Count)" <- as.vector(source_data$"Other Transfer (Count)")
source_data$"Other Transfer (Rate)" <- as.vector(source_data$"Other Transfer (Rate)")
source_data$"Dropout (Count)" <- as.vector(source_data$"Dropout (Count)")
source_data$"Dropout (Rate)" <- as.vector(source_data$"Dropout (Rate)")
source_data$"Still Enrolled (Count)" <- as.vector(source_data$"Still Enrolled (Count)")
source_data$"Still Enrolled (Rate)" <- as.vector(source_data$"Still Enrolled (Rate)")
source_data$CountyCode <- as.vector(source_data$CountyCode)
source_data$DistrictCode <- as.vector(source_data$DistrictCode)
source_data$SchoolCode <- as.vector(source_data$SchoolCode)
#Order source data table
source_data <- source_data[order(source_data$"AcademicYear",source_data$"AggregateLevel",source_data$"CountyCode",source_data$"DistrictCode",source_data$"SchoolCode",source_data$"CountyName",source_data$"DistrictName",source_data$"SchoolName",source_data$"CharterSchool",
source_data$"DASS",source_data$"ReportingCategory",source_data$"CohortStudents",source_data$"Regular HS Diploma Graduates (Count)",source_data$"Regular HS Diploma Graduates (Rate)",source_data$"Met UC CSU Grad Req's (Count)",
source_data$"Met UC CSU Grad Req's (Rate)",source_data$"Seal of Biliteracy (Count)",source_data$"Seal of Biliteracy (Rate)",source_data$"Golden State Seal Merit Diploma (Count)",source_data$"Golden State Seal Merit Diploma (Rate",
source_data$"CHSPE Completer (Count)",source_data$"CHSPE Completer (Rate)",source_data$"Adult Ed  HS Diploma (Count)",source_data$"Adult Ed  HS Diploma (Rate)",source_data$"SPED Certificate (Count)",source_data$"SPED Certificate (Rate)",
source_data$"GED Completer (Count)",source_data$"GED Completer (Rate)",source_data$"Other Transfer (Count)",source_data$"Other Transfer (Rate)",source_data$"Dropout (Count)",source_data$"Dropout (Rate)",source_data$"Still Enrolled (Count)",
source_data$"Still Enrolled (Rate)"),]
#Order database data table
database_data <- database_data[order(database_data$"AcademicYear",database_data$"AggregateLevel",database_data$"CountyCode",database_data$"DistrictCode",database_data$"SchoolCode",database_data$"CountyName",database_data$"DistrictName",database_data$"SchoolName",
database_data$"CharterSchool",database_data$"DASS",database_data$"ReportingCategory",database_data$"CohortStudents",database_data$"Regular HS Diploma Graduates (Count)",database_data$"Regular HS Diploma Graduates (Rate)",
database_data$"Met UC CSU Grad Req's (Count)",database_data$"Met UC CSU Grad Req's (Rate)",database_data$"Seal of Biliteracy (Count)",database_data$"Seal of Biliteracy (Rate)",database_data$"Golden State Seal Merit Diploma (Count)",
database_data$"Golden State Seal Merit Diploma (Rate",database_data$"CHSPE Completer (Count)",database_data$"CHSPE Completer (Rate)",database_data$"Adult Ed  HS Diploma (Count)",database_data$"Adult Ed  HS Diploma (Rate)",
database_data$"SPED Certificate (Count)",database_data$"SPED Certificate (Rate)",database_data$"GED Completer (Count)",database_data$"GED Completer (Rate)",database_data$"Other Transfer (Count)",database_data$"Other Transfer (Rate)",
database_data$"Dropout (Count)",database_data$"Dropout (Rate)",database_data$"Still Enrolled (Count)",database_data$"Still Enrolled (Rate)"),]
#Delete unique key assigned by R so that identical function will work
rownames(source_data) <- NULL
rownames(database_data) <- NULL
#compare files
all(source_data == database_data) #check cell values only
all.equal(source_data,database_data) #check cell values and data types and will return the conflicted cells
identical(source_data,database_data) #check cell values and data types
which(source_data!=database_data,arr.ind=TRUE)
#####################################################################################################################################################################
#Compare source data to fact table
#Read in sql query
options(stringsAsFactors=FALSE)
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query <- 'SELECT * FROM [dpoe_stage].[staging].[cohort_outcome]'
cohort<-sqlQuery(channel,sql_query)
odbcClose(channel)
#To see column names in cohort data
# colnames(cohort)
# colnames(source_data)
#Rename source data to match fact table. Make sure order is the same in both datasets.
source_data <- plyr::rename(source_data, c("Golden State Seal Merit Diploma (Rate"="Golden State Seal Merit Diploma (Rate)"))
#Check data types
# str(source_data)
# str(cohort)
#Convert data types
source_data$CohortStudents <- as.integer(source_data$CohortStudents)
source_data$"Regular HS Diploma Graduates (Count)" <- as.integer(source_data$"Regular HS Diploma Graduates (Count)")
source_data$"Regular HS Diploma Graduates (Rate)" <- as.numeric(source_data$"Regular HS Diploma Graduates (Rate)")
source_data$"Met UC CSU Grad Req's (Count)" <- as.integer(source_data$"Met UC CSU Grad Req's (Count)")
source_data$"Met UC CSU Grad Req's (Rate)" <- as.numeric(source_data$"Met UC CSU Grad Req's (Rate)")
source_data$"Seal of Biliteracy (Count)" <- as.integer(source_data$"Seal of Biliteracy (Count)")
source_data$"Seal of Biliteracy (Rate)" <- as.numeric(source_data$"Seal of Biliteracy (Rate)")
source_data$"Golden State Seal Merit Diploma (Count)" <- as.integer(source_data$"Golden State Seal Merit Diploma (Count)")
source_data$"Golden State Seal Merit Diploma (Rate)" <- as.numeric(source_data$"Golden State Seal Merit Diploma (Rate)")
source_data$"CHSPE Completer (Count)" <- as.integer(source_data$"CHSPE Completer (Count)")
source_data$"CHSPE Completer (Rate)" <- as.numeric(source_data$"CHSPE Completer (Rate)")
source_data$"Adult Ed  HS Diploma (Count)" <- as.integer(source_data$"Adult Ed  HS Diploma (Count)")
source_data$"Adult Ed  HS Diploma (Rate)" <- as.numeric(source_data$"Adult Ed  HS Diploma (Rate)")
source_data$"SPED Certificate (Count)" <- as.integer(source_data$"SPED Certificate (Count)")
source_data$"SPED Certificate (Rate)" <- as.numeric(source_data$"SPED Certificate (Rate)")
source_data$"GED Completer (Count)" <- as.integer(source_data$"GED Completer (Count)")
source_data$"GED Completer (Rate)" <- as.numeric(source_data$"GED Completer (Rate)")
source_data$"Other Transfer (Count)" <- as.integer(source_data$"Other Transfer (Count)")
source_data$"Other Transfer (Rate)" <- as.numeric(source_data$"Other Transfer (Rate)")
source_data$"Dropout (Count)" <- as.integer(source_data$"Dropout (Count)")
source_data$"Dropout (Rate)" <- as.numeric(source_data$"Dropout (Rate)")
source_data$"Still Enrolled (Count)" <- as.integer(source_data$"Still Enrolled (Count)")
source_data$"Still Enrolled (Rate)" <- as.numeric(source_data$"Still Enrolled (Rate)")
#Convert NA's to 0s
source_data$DistrictCode[is.na(source_data$DistrictCode)] <- 0
source_data$SchoolCode[is.na(source_data$SchoolCode)] <- 0
#Order table cohort
cohort <- cohort[order(cohort$"AcademicYear",cohort$"AggregateLevel",cohort$"CountyCode",cohort$"DistrictCode",cohort$"SchoolCode",cohort$"CountyName",cohort$"DistrictName",cohort$"SchoolName",cohort$"CharterSchool",cohort$"DASS",cohort$"ReportingCategory",cohort$"CohortStudents",
cohort$"Regular HS Diploma Graduates (Count)",cohort$"Regular HS Diploma Graduates (Rate)",cohort$"Met UC CSU Grad Req's (Count)",cohort$"Met UC CSU Grad Req's (Rate)",cohort$"Seal of Biliteracy (Count)",cohort$"Seal of Biliteracy (Rate)",
cohort$"Golden State Seal Merit Diploma (Count)",cohort$"Golden State Seal Merit Diploma (Rate)",cohort$"CHSPE Completer (Count)",cohort$"CHSPE Completer (Rate)",cohort$"Adult Ed  HS Diploma (Count)",cohort$"Adult Ed  HS Diploma (Rate)",
cohort$"SPED Certificate (Count)",cohort$"SPED Certificate (Rate)",cohort$"GED Completer (Count)",cohort$"GED Completer (Rate)",cohort$"Other Transfer (Count)",cohort$"Other Transfer (Rate)",cohort$"Dropout (Count)",cohort$"Dropout (Rate)",
cohort$"Still Enrolled (Count)",cohort$"Still Enrolled (Rate)"),]
#Order source data table
source_data <- source_data[order(source_data$"AcademicYear",source_data$"AggregateLevel",source_data$"CountyCode",source_data$"DistrictCode",source_data$"SchoolCode",source_data$"CountyName",source_data$"DistrictName",source_data$"SchoolName",source_data$"CharterSchool",
source_data$"DASS",source_data$"ReportingCategory",source_data$"CohortStudents",source_data$"Regular HS Diploma Graduates (Count)",source_data$"Regular HS Diploma Graduates (Rate)",source_data$"Met UC CSU Grad Req's (Count)",
source_data$"Met UC CSU Grad Req's (Rate)",source_data$"Seal of Biliteracy (Count)",source_data$"Seal of Biliteracy (Rate)",source_data$"Golden State Seal Merit Diploma (Count)",source_data$"Golden State Seal Merit Diploma (Rate)",
source_data$"CHSPE Completer (Count)",source_data$"CHSPE Completer (Rate)",source_data$"Adult Ed  HS Diploma (Count)",source_data$"Adult Ed  HS Diploma (Rate)",source_data$"SPED Certificate (Count)",source_data$"SPED Certificate (Rate)",
source_data$"GED Completer (Count)",source_data$"GED Completer (Rate)",source_data$"Other Transfer (Count)",source_data$"Other Transfer (Rate)",source_data$"Dropout (Count)",source_data$"Dropout (Rate)",source_data$"Still Enrolled (Count)",
source_data$"Still Enrolled (Rate)"),]
#Delete unique key assigned by R so that identical function will work
rownames(source_data) <- NULL
rownames(cohort) <- NULL
#compare files
all(source_data == cohort) #check cell values only
all.equal(source_data,cohort) #check cell values and data types and will return the conflicted cells
identical(source_data$AcademicYear,cohort$AcademicYear) #check cell values and data types
which(source_data!=cohort,arr.ind=TRUE)
