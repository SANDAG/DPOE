#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Final Table Specs.xlsx"
source1 <- read_excel(file, sheet = 'Table Specs')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.ctpp_line'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
source1 <- select(source1, -c("Wave","Type","Indent","Sub Range","1 Year Sourcing","3 Year Sourcing","5 Year Sourcing"))
#Remove nas from source_data
source1 <- source1[complete.cases(source1), ]
#Check data types
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#Trim whitespace
db1$Stub <- trimws(db1$Stub)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_line where yr = 2016'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
View(final)
View(source1)
#Rename source data
source1 <- plyr::rename(source1, c("Table ID"="subject_table_id","Line Number"="line_number","Stub"="line_desc"))
#Check data types
str(source1)
str(final)
#Convert data types
source1$line_number <- as.integer(source1$line_number)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#Order table
source1 <- source1[order(source1$subject_table_id,source1$line_number,source1$line_desc),]
final <- final[order(final$subject_table_id,final$line_number,final$line_desc),]
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
source1[19,3]
final[19,3]
#Trim whitespace
final$line_desc <- trimws(final$line_desc)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#CTPP 2012-2016 QAQC CTPP Line Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Final Table Specs.xlsx"
source1 <- read_excel(file, sheet = 'Table Specs')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.ctpp_line'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
source1 <- select(source1, -c("Wave","Type","Indent","Sub Range","1 Year Sourcing","3 Year Sourcing","5 Year Sourcing"))
#Remove nas from source_data
source1 <- source1[complete.cases(source1), ]
#Check data types
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#Trim whitespace
db1$Stub <- trimws(db1$Stub)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_line where yr = 2016'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
#Rename source data
source1 <- plyr::rename(source1, c("Table ID"="subject_table_id","Line Number"="line_number","Stub"="line_desc"))
#Check data types
str(source1)
str(final)
#Convert data types
source1$line_number <- as.integer(source1$line_number)
#Order table
# source1 <- source1[order(source1$subject_table_id,source1$line_number,source1$line_desc),]
# final <- final[order(final$subject_table_id,final$line_number,final$line_desc),]
#Trim whitespace
final$line_desc <- trimws(final$line_desc)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#Order table
source1 <- source1[order(source1$subject_table_id,source1$line_number,source1$line_desc),]
final <- final[order(final$subject_table_id,final$line_number,final$line_desc),]
#Trim whitespace
final$line_desc <- trimws(final$line_desc)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
View(db1)
View(source1)
#Remove nas from source_data
source1 <- source1[complete.cases(source1), ]
View(source1)
View(db1)
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Remove nas from source_data
source1<- source1[-c(1,14,26,44:63),]
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Remove nas from source_data
source1<- source1[-c(1:2,14,26,44:63),]
#Check data types
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#Check column names
colnames(source1)
colnames(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2012-2016 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geo_id_variables","...4"="format"))
#Check data types
str(source1)
str(db1)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_geo where yr = 2016'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
View(final)
#Column names
colnames(final)
colnames(source1)
#Rename source data
source1 <- plyr::rename(source1, "format"="geoid_format")
source1 <- plyr::rename(source1, c("format"="geoid_format"))
#Check data types
str(source1)
str(final)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Check column names
colnames(source1)
colnames(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2012-2016 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geo_id_variables","...4"="format"))
#Remove nas from source_data
source1<- source1[-c(1:2,14,26,44:63),]
#Check data types
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_geo where yr = 2016'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
#Column names
colnames(final)
colnames(source1)
#Rename source data
source1 <- plyr::rename(source1, c("geo_id_variables"="geoid_variables", "format"="geoid_format"))
#Check data types
str(source1)
str(final)
# #Order table
# source1 <- source1[order(source1$subject_table_id,source1$line_number,source1$line_desc),]
# final <- final[order(final$subject_table_id,final$line_number,final$line_desc),]
#
# #Trim whitespace
# final$line_desc <- trimws(final$line_desc)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#CTPP 2006-2010 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2006-2010/Documentation/2006-2010_CTPP_Documentation for AASHTO-4-24.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.ctpp_2010_geoids'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Check column names
colnames(source1)
colnames(db1)
View(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2006-2010 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geoid_variables","...4"="geoid_format"))
db1 <- plyr::rename(db1, c("Format of Summary Levels for the CTPP 2006-2010 5-Year Special T"="summary_level","F2"="summary_level_desc","F3"="geoid_variables","F4"="geoid_format"))
View(source1)
#Remove nas from source_data
source1<- source1[-c(1:2,15,28,45:64),]
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_geo where yr = 2010'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
str(source1)
str(final)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
colnames(source1)
colnames(db1)
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Check column names
colnames(source1)
colnames(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2012-2016 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geoid_variables","...4"="geoid_format"))
db1 <- plyr::rename(db1, c("Format of Summary Levels for the CTPP 2012-2016 5-Year Special T"="summary_level","F2"="summary_level_desc","F3"="geoid_variables","F4"="geoid_format"))
#CTPP 2012-2016 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2012-2016/Documentation/2012-2016 CTPP Requirements.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.[Geoids$]'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Check column names
colnames(source1)
colnames(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2012-2016 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geoid_variables","...4"="geoid_format"))
db1 <- plyr::rename(db1, c("geo_id_variables"="geoid_variables","format"="geoid_format"))
#Remove nas from source_data
source1<- source1[-c(1:2,14,26,44:63),]
#Check data types
# str(source1)
# str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_geo where yr = 2016'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
#CTPP 2006-2010 QAQC CTPP Geo Dimension Table
#file comparison code between a xls source file and raw upload SQL Table
#set working directory and access code to read in SQL queries
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..\\..\\..\\Common_functions\\Loading_in_packages.R")
source("..\\..\\..\\Common_functions\\readSQL.R")
getwd()
#Load source data
file <- "R:/DPOE/CTPP/2006-2010/Documentation/2006-2010_CTPP_Documentation for AASHTO-4-24.xlsx"
source1 <- read_excel(file, sheet = 'Geoids')
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dbo.ctpp_2010_geoids'
db1 <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Check column names
# colnames(source1)
# colnames(db1)
#Rename source data
source1 <- plyr::rename(source1, c("Format of Summary Levels for the CTPP 2006-2010 5-Year Special Tab"="summary_level","...2"="summary_level_desc","...3"="geoid_variables","...4"="geoid_format"))
db1 <- plyr::rename(db1, c("Format of Summary Levels for the CTPP 2006-2010 5-Year Special T"="summary_level","F2"="summary_level_desc","F3"="geoid_variables","F4"="geoid_format"))
#Remove nas from source_data
source1<- source1[-c(1:2,15,28,45:64),]
#Check data types
str(source1)
str(db1)
#Convert to data frame
source1 <- as.data.frame(source1)
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(db1) <- NULL
#Compare files
all(source1 == db1) #check cell values only
all.equal(source1,db1) #check cell values and data types and will return the conflicted cells
identical(source1,db1) #check cell values and data types
which(source1!=db1, arr.ind = TRUE) #which command shows exactly which columns are incorrect
####################################################################################################################################
#file comparison code between source file and final SQL Table
#Load database data
channel <- odbcDriverConnect('driver={SQL Server}; server=socioeca8; database=dpoe_stage; trusted_connection=true')
sql_query1 <- 'SELECT * FROM dpoe_stage.dim.ctpp_geo where yr = 2010'
final <- sqlQuery(channel,sql_query1,stringsAsFactors = FALSE)
odbcClose(channel)
#Delete unneccessary columns
final<- final[,-c(1:3)]
#delete rownames for checking files match (R assigns arbitrary IDs)
rownames(source1) <- NULL
rownames(final) <- NULL
#Compare files
all(source1 == final) #check cell values only
all.equal(source1,final) #check cell values and data types and will return the conflicted cells
identical(source1,final) #check cell values and data types
which(source1!=final, arr.ind = TRUE) #which command shows exactly which columns are incorrect
